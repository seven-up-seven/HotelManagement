package com.example.frontendquanlikhachsan.controllers.manager;

import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.util.Arrays;
import java.util.List;

/**
 * Controller cho file StaffManager.fxml
 * Gi·∫£ l·∫≠p d·ªØ li·ªáu m·∫´u v√† binding v√†o TableView + Detail Pane.
 */
public class StaffController {

    // ==== LEFT: TableView v√† c√°c c·ªôt ====
    @FXML
    private TableView<ResponseStaffDto> tableStaff;

    @FXML
    private TableColumn<ResponseStaffDto, Integer> colId;

    @FXML
    private TableColumn<ResponseStaffDto, String> colFullName;

    @FXML
    private TableColumn<ResponseStaffDto, Position> colPosition;

    @FXML
    private TableColumn<ResponseStaffDto, Sex> colSex;

    @FXML
    private TableColumn<ResponseStaffDto, Integer> colAge;

    @FXML
    private TableColumn<ResponseStaffDto, String> colAddress;

    @FXML
    private TableColumn<ResponseStaffDto, String> colUsername;

    // ==== RIGHT: Detail Pane (n∆°i s·∫Ω th√™m Label, Accordion, Button‚Ä¶) ====
    @FXML
    private VBox detailPane;

    // ObservableList ch·ª©a d·ªØ li·ªáu Staff (th·ª±c t·∫ø b·∫°n c√≥ th·ªÉ load t·ª´ service/database)
    private ObservableList<ResponseStaffDto> staffList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // 1. Thi·∫øt l·∫≠p cellValueFactory cho c√°c c·ªôt
        colId.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getId())
        );

        colFullName.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getFullName())
        );

        colPosition.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getPosition())
        );

        colSex.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getSex())
        );

        colAge.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getAge())
        );

        // colAddress: show short address (gi·∫£ s·ª≠ ResponseStaffDto c√≥ ph∆∞∆°ng th·ª©c getShortAddress())
        colAddress.setCellValueFactory(cellData ->
                new ReadOnlyObjectWrapper<>(cellData.getValue().getShortAddress())
        );

        // colUsername: n·∫øu account null th√¨ hi·ªÉn th·ªã "‚Äì"
        colUsername.setCellValueFactory(cellData -> {
            if (cellData.getValue().getAccount() == null) {
                return new ReadOnlyObjectWrapper<>("‚Äì");
            } else {
                return new ReadOnlyObjectWrapper<>(cellData.getValue().getAccount().getUsername());
            }
        });

        // 2. N·∫°p d·ªØ li·ªáu m·∫´u v√†o staffList v√† setItems cho tableStaff
        staffList.addAll(getSampleData());
        tableStaff.setItems(staffList);

        // 3. L·∫Øng nghe s·ª± ki·ªán ch·ªçn 1 d√≤ng trong TableView
        tableStaff.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -> {
            if (newSel != null) {
                showStaffDetail(newSel);
            } else {
                clearDetailPane();
            }
        });
    }

    /**
     * Xo√° s·∫°ch content c·ªßa detailPane, hi·ªÉn th·ªã placeholder
     */
    private void clearDetailPane() {
        detailPane.getChildren().clear();
        Label placeholder = new Label("Ch·ªçn 1 nh√¢n vi√™n ƒë·ªÉ xem chi ti·∫øt...");
        placeholder.setStyle("-fx-font-style: italic; -fx-text-fill: #666;");
        detailPane.getChildren().add(placeholder);
    }

    /**
     * Khi user click v√†o 1 staff, h√†m n√†y build n·ªôi dung chi ti·∫øt l√™n detailPane.
     */
    private void showStaffDetail(ResponseStaffDto staff) {
        detailPane.getChildren().clear();

        // ===== SECTION 1: Th√¥ng tin c∆° b·∫£n =====
        VBox basicBox = new VBox(6);
        basicBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        basicBox.setPadding(new javafx.geometry.Insets(8));

        Label sec1 = new Label("¬ª Th√¥ng tin c∆° b·∫£n");
        sec1.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        basicBox.getChildren().add(sec1);

        basicBox.getChildren().add(new Label("ID: " + staff.getId()));
        basicBox.getChildren().add(new Label("H·ªç & T√™n: " + staff.getFullName()));
        basicBox.getChildren().add(new Label("Tu·ªïi: " + staff.getAge()));
        basicBox.getChildren().add(new Label("Gi·ªõi t√≠nh: " + staff.getSex()));
        basicBox.getChildren().add(new Label("ƒê·ªãa ch·ªâ: " + staff.getAddress()));
        basicBox.getChildren().add(new Label("Ch·ª©c v·ª•: " + staff.getPosition()));
        basicBox.getChildren().add(new Label("H·ªá s·ªë l∆∞∆°ng: " + staff.getSalaryMultiplier()));
        basicBox.getChildren().add(new Label("CMND/CCCD: " + staff.getIdentificationNumber()));

        // ===== SECTION 2: Th√¥ng tin T√†i kho·∫£n =====
        VBox accountBox = new VBox(6);
        accountBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        accountBox.setPadding(new javafx.geometry.Insets(8));

        Label sec2 = new Label("¬ª Th√¥ng tin t√†i kho·∫£n");
        sec2.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        accountBox.getChildren().add(sec2);

        if (staff.getAccount() == null) {
            // N·∫øu ch∆∞a c√≥ account
            HBox row = new HBox(8);
            Label noAcc = new Label("Ch∆∞a c√≥ t√†i kho·∫£n");
            noAcc.setStyle("-fx-background-color: #e57373; -fx-text-fill: #fff; -fx-padding: 4 8; -fx-border-radius: 4px; -fx-background-radius: 4px;");
            Button btnCreate = new Button("T·∫°o t√†i kho·∫£n");
            btnCreate.setOnAction(e -> {
                // TODO: chuy·ªÉn ƒë·∫øn form t·∫°o account
                showInfoAlert("T·∫°o t√†i kho·∫£n", "Chuy·ªÉn ƒë·∫øn form t·∫°o t√†i kho·∫£n...");
            });
            row.getChildren().addAll(noAcc, btnCreate);
            accountBox.getChildren().add(row);
        } else {
            // N·∫øu ƒë√£ c√≥ account
            accountBox.getChildren().add(new Label("Username: " + staff.getAccount().getUsername()));
            accountBox.getChildren().add(new Label("Email: " + staff.getAccount().getEmail()));
            Button btnEditAcc = new Button("Ch·ªânh s·ª≠a t√†i kho·∫£n");
            btnEditAcc.setOnAction(e -> {
                // TODO: chuy·ªÉn ƒë·∫øn form ch·ªânh s·ª≠a account
                showInfoAlert("Ch·ªânh s·ª≠a t√†i kho·∫£n", "Chuy·ªÉn ƒë·∫øn form ch·ªânh s·ª≠a t√†i kho·∫£n...");
            });
            accountBox.getChildren().add(btnEditAcc);
        }

        // ===== SECTION 3: Accordion cho c√°c list (invoiceIds, rentalExtensionFormIds, rentalFormIds) =====
        VBox relatedBox = new VBox(6);
        relatedBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        relatedBox.setPadding(new javafx.geometry.Insets(8));

        Label sec3 = new Label("¬ª Ho√° ƒë∆°n & Phi·∫øu thu√™");
        sec3.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        relatedBox.getChildren().add(sec3);

        Accordion accordion = new Accordion();

        // Ho√° ƒë∆°n
        TitledPane tpInvoices = createListTitledPane(
                "üìÑ Danh s√°ch Ho√° ƒë∆°n",
                staff.getInvoiceIds(),
                "Invoice"
        );
        // Phi·∫øu gia h·∫°n
        TitledPane tpExtensions = createListTitledPane(
                "üîÑ Danh s√°ch Phi·∫øu gia h·∫°n",
                staff.getRentalExtensionFormIds(),
                "Rental Extension"
        );
        // Phi·∫øu thu√™
        TitledPane tpRentals = createListTitledPane(
                "üè† Danh s√°ch Phi·∫øu thu√™",
                staff.getRentalFormIds(),
                "Rental Form"
        );

        accordion.getPanes().addAll(tpInvoices, tpExtensions, tpRentals);
        // M·ªü m·∫∑c ƒë·ªãnh pane ƒë·∫ßu ti√™n
        if (!accordion.getPanes().isEmpty()) {
            accordion.setExpandedPane(accordion.getPanes().get(0));
        }

        relatedBox.getChildren().add(accordion);

        // ===== SECTION 4: Action Buttons (Quay l·∫°i, Ch·ªânh s·ª≠a nh√¢n vi√™n) =====
        HBox actionBox = new HBox(10);
        actionBox.setPadding(new javafx.geometry.Insets(8, 0, 0, 0));

        Button btnBack = new Button("¬´ Quay l·∫°i");
        btnBack.setOnAction(e -> tableStaff.getSelectionModel().clearSelection());

        Button btnEditStaff = new Button("Ch·ªânh s·ª≠a nh√¢n vi√™n");
        btnEditStaff.setOnAction(e -> {
            // TODO: chuy·ªÉn ƒë·∫øn form edit staff
            showInfoAlert("Ch·ªânh s·ª≠a nh√¢n vi√™n", "Chuy·ªÉn ƒë·∫øn form ch·ªânh s·ª≠a nh√¢n vi√™n...");
        });

        actionBox.getChildren().addAll(btnBack, btnEditStaff);

        // ==== Cu·ªëi c√πng, th√™m t·∫•t c·∫£ c√°c section v√†o detailPane ====
        detailPane.getChildren().addAll(basicBox, accountBox, relatedBox, actionBox);
    }

    /**
     * T·∫°o 1 TitledPane v·ªõi n·ªôi dung l√† danh s√°ch c√°c ID (List<Integer>).
     * @param title  Ti√™u ƒë·ªÅ (v√≠ d·ª• "üìÑ Danh s√°ch Ho√° ƒë∆°n")
     * @param ids    List<Integer> ID t∆∞∆°ng ·ª©ng
     * @param prefix Ti·ªÅn t·ªë khi hi·ªÉn th·ªã (v√≠ d·ª• "Invoice" -> link "Invoice #101")
     * @return TitledPane ƒë√£ build s·∫µn n·ªôi dung
     */
    private TitledPane createListTitledPane(String title, List<Integer> ids, String prefix) {
        VBox box = new VBox(4);
        box.setPadding(new javafx.geometry.Insets(6));

        if (ids == null || ids.isEmpty()) {
            Label empty = new Label("Ch∆∞a c√≥ m·ª•c n√†o");
            empty.setStyle("-fx-font-style: italic; -fx-text-fill: #666;");
            box.getChildren().add(empty);
        } else {
            for (Integer id : ids) {
                Hyperlink link = new Hyperlink(prefix + " #" + id);
                link.setOnAction(e -> {
                    // TODO: x·ª≠ l√Ω khi click v√†o link, v√≠ d·ª• m·ªü chi ti·∫øt Invoice/Rental...
                    showInfoAlert("Xem chi ti·∫øt", "B·∫°n ch·ªçn: " + prefix + " #" + id);
                });
                box.getChildren().add(link);
            }
        }

        TitledPane tp = new TitledPane(title + " (" + (ids == null ? 0 : ids.size()) + ")", box);
        tp.setAnimated(true);
        return tp;
    }

    /**
     * Hi·ªÉn th·ªã Alert th√¥ng tin (d√πng ƒë·ªÉ mock/nhi·ªám v·ª• TODO).
     */
    private void showInfoAlert(String header, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(header);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    /**
     * T·∫°o d·ªØ li·ªáu m·∫´u (ch·ªâ demo). Thay th·∫ø b·∫±ng load th·ª±c t·∫ø khi tri·ªÉn khai.
     */
    private List<ResponseStaffDto> getSampleData() {
        // Gi·∫£ l·∫≠p Account
        Account accB = new Account("tranthib", "btran@example.com");
        Account accC = new Account("levanc",    "clev@example.com");

        return Arrays.asList(
                new ResponseStaffDto(
                        1,
                        "Nguy·ªÖn VƒÉn A",
                        30,
                        "012345678",
                        "S·ªë 123, Ph∆∞·ªùng X, Qu·∫≠n Y, H√† N·ªôi",
                        Sex.MALE,
                        1.5f,
                        Position.QUAN_LY,
                        null,  // ch∆∞a c√≥ account
                        Arrays.asList(101, 102),
                        Arrays.asList(201),
                        Arrays.asList(301, 302)
                ),
                new ResponseStaffDto(
                        2,
                        "Tr·∫ßn Th·ªã B",
                        25,
                        "098765432",
                        "S·ªë 456, Ph∆∞·ªùng Z, Qu·∫≠n W, TP. H·ªì Ch√≠ Minh",
                        Sex.FEMALE,
                        1.2f,
                        Position.NHAN_VIEN,
                        accB,
                        FXCollections.observableArrayList(), // no invoice
                        FXCollections.observableArrayList(), // no extension
                        Arrays.asList(401)                   // 1 rental
                ),
                new ResponseStaffDto(
                        3,
                        "L√™ VƒÉn C",
                        28,
                        "023456789",
                        "S·ªë 789, Ph∆∞·ªùng A, Qu·∫≠n B, ƒê√† N·∫µng",
                        Sex.MALE,
                        1.0f,
                        Position.KI_THUAT,
                        accC,
                        Arrays.asList(103),
                        Arrays.asList(202, 203),
                        FXCollections.observableArrayList() // no rental
                )
        );
    }
}
