package com.example.frontendquanlikhachsan.controllers.manager;

import com.example.frontendquanlikhachsan.entity.account.Account;
import com.example.frontendquanlikhachsan.entity.enums.Sex;
import com.example.frontendquanlikhachsan.entity.position.Position;
import com.example.frontendquanlikhachsan.entity.staff.ResponseStaffDto;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.util.Arrays;
import java.util.List;

/**
 * Controller cho file StaffManager.fxml
 * Gi·ªØ nguy√™n c√°ch seeding m·∫´u v√† th√™m ch·ª©c nƒÉng ‚ÄúT·∫°o Nh√¢n vi√™n‚Äù (Create) v√†o detailPane.
 */
public class StaffController {

    // ==== LEFT: TableView v√† c√°c c·ªôt ====
    @FXML
    private TableView<ResponseStaffDto> tableStaff;
    @FXML
    private TableColumn<ResponseStaffDto, Integer> colId;
    @FXML
    private TableColumn<ResponseStaffDto, String> colFullName;
    @FXML
    private TableColumn<ResponseStaffDto, Position> colPosition;
    @FXML
    private TableColumn<ResponseStaffDto, Sex> colSex;
    @FXML
    private TableColumn<ResponseStaffDto, Integer> colAge;
    @FXML
    private TableColumn<ResponseStaffDto, String> colAddress;
    @FXML
    private TableColumn<ResponseStaffDto, String> colUsername;

    // ==== RIGHT: Detail Pane (n∆°i s·∫Ω hi·ªÉn th·ªã detail ho·∫∑c form t·∫°o m·ªõi) ====
    @FXML
    private VBox detailPane;

    // ObservableList ch·ª©a d·ªØ li·ªáu Staff (gi·ªØ c√°ch seeding hi·ªán t·∫°i)
    private ObservableList<ResponseStaffDto> staffList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // 1. Thi·∫øt l·∫≠p cellValueFactory cho c√°c c·ªôt
        colId.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getId()));
        colFullName.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getFullName()));
        colPosition.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getPosition()));
        colSex.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getSex()));
        colAge.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getAge()));
        // colAddress: show full address (theo seeding)
        colAddress.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(cellData.getValue().getAddress()));
        // colUsername: n·∫øu account null th√¨ hi·ªÉn th·ªã "‚Äì"
        colUsername.setCellValueFactory(cellData -> {
            if (cellData.getValue().getAccount() == null) {
                return new ReadOnlyObjectWrapper<>("‚Äì");
            } else {
                return new ReadOnlyObjectWrapper<>(cellData.getValue().getAccount().getUsername());
            }
        });

        // 2. N·∫°p d·ªØ li·ªáu m·∫´u v√†o staffList v√† setItems cho tableStaff
        staffList.addAll(getSampleData());
        tableStaff.setItems(staffList);

        // 3. L·∫Øng nghe s·ª± ki·ªán ch·ªçn 1 d√≤ng trong TableView
        tableStaff.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -> {
            if (newSel != null) {
                showStaffDetail(newSel);
            } else {
                clearDetailPane();
            }
        });

        // 4. Khi l·∫ßn ƒë·∫ßu load, show placeholder
        clearDetailPane();
    }

    /**
     * ƒê∆∞·ª£c g·ªçi khi user b·∫•m n√∫t ‚ÄúT·∫°o nh√¢n vi√™n m·ªõi‚Äù (tr√™n danh s√°ch).
     * Hi·ªÉn th·ªã form t·∫°o _nh√¢n vi√™n_ (t∆∞∆°ng t·ª± showCreateStaffForm c≈©).
     */
    @FXML
    public void onCreateStaff() {
        showCreateStaffForm();
    }


    /**
     * Xo√° s·∫°ch content c·ªßa detailPane, hi·ªÉn th·ªã placeholder
     */
    private void clearDetailPane() {
        detailPane.getChildren().clear();
        Label placeholder = new Label("Ch·ªçn 1 nh√¢n vi√™n ƒë·ªÉ xem chi ti·∫øt...");
        placeholder.setStyle("-fx-font-style: italic; -fx-text-fill: #666;");
        detailPane.getChildren().add(placeholder);
    }

    /**
     * Khi user click v√†o 1 staff, h√†m n√†y build n·ªôi dung chi ti·∫øt l√™n detailPane.
     */
    private void showStaffDetail(ResponseStaffDto staff) {
        detailPane.getChildren().clear();

        // ===== SECTION 1: Th√¥ng tin c∆° b·∫£n =====
        VBox basicBox = new VBox(6);
        basicBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        basicBox.setPadding(new Insets(8));

        Label sec1 = new Label("¬ª Th√¥ng tin c∆° b·∫£n");
        sec1.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        basicBox.getChildren().add(sec1);

        basicBox.getChildren().add(new Label("ID: " + staff.getId()));
        basicBox.getChildren().add(new Label("H·ªç & T√™n: " + staff.getFullName()));
        basicBox.getChildren().add(new Label("Tu·ªïi: " + staff.getAge()));
        basicBox.getChildren().add(new Label("Gi·ªõi t√≠nh: " + staff.getSex()));
        basicBox.getChildren().add(new Label("ƒê·ªãa ch·ªâ: " + staff.getAddress()));
        basicBox.getChildren().add(new Label("Ch·ª©c v·ª•: " + staff.getPosition()));
        basicBox.getChildren().add(new Label("H·ªá s·ªë l∆∞∆°ng: " + staff.getSalaryMultiplier()));
        basicBox.getChildren().add(new Label("CMND/CCCD: " + staff.getIdentificationNumber()));

        // ===== SECTION 2: Th√¥ng tin T√†i kho·∫£n =====
        VBox accountBox = new VBox(6);
        accountBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        accountBox.setPadding(new Insets(8));

        Label sec2 = new Label("¬ª Th√¥ng tin t√†i kho·∫£n");
        sec2.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        accountBox.getChildren().add(sec2);

        if (staff.getAccount() == null) {
            // N·∫øu ch∆∞a c√≥ account ‚Üí hi·ªÉn th·ªã n√∫t ‚ÄúT·∫°o t√†i kho·∫£n‚Äù
            HBox row = new HBox(8);
            Label noAcc = new Label("Ch∆∞a c√≥ t√†i kho·∫£n");
            noAcc.setStyle("-fx-background-color: #e57373; -fx-text-fill: #fff; -fx-padding: 4 8; -fx-border-radius: 4px; -fx-background-radius: 4px;");
            Button btnCreate = new Button("T·∫°o t√†i kho·∫£n");
            btnCreate.setOnAction(e -> showCreateAccountForm(staff));
            row.getChildren().addAll(noAcc, btnCreate);
            accountBox.getChildren().add(row);
        } else {
            // N·∫øu ƒë√£ c√≥ account
            accountBox.getChildren().add(new Label("Username: " + staff.getAccount().getUsername()));
            accountBox.getChildren().add(new Label("Password: " + staff.getAccount().getPassword()));
            //kh√¥ng cho s·ª≠a, admin m·ªõi cho s·ª≠a xo√° t√†i kho·∫£n
//            Button btnEditAcc = new Button("Ch·ªânh s·ª≠a t√†i kho·∫£n");
//            btnEditAcc.setOnAction(e -> showInfoAlert("Ch·ªânh s·ª≠a t√†i kho·∫£n", "Ch·ª©c nƒÉng ch·ªânh s·ª≠a t√†i kho·∫£n s·∫Ω tri·ªÉn khai sau..."));
//            accountBox.getChildren().add(btnEditAcc);
        }

        // ===== SECTION 3: Accordion cho c√°c list (invoiceIds, rentalExtensionFormIds, rentalFormIds) =====
        VBox relatedBox = new VBox(6);
        relatedBox.setStyle("-fx-border-color: #dedede; -fx-border-radius: 4px; -fx-border-width: 1;");
        relatedBox.setPadding(new Insets(8));

        Label sec3 = new Label("¬ª Ho√° ƒë∆°n & Phi·∫øu thu√™");
        sec3.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");
        relatedBox.getChildren().add(sec3);

        Accordion accordion = new Accordion();
        TitledPane tpInvoices = createListTitledPane("üìÑ Danh s√°ch Ho√° ƒë∆°n", staff.getInvoiceIds(), "Invoice");
        TitledPane tpExtensions = createListTitledPane("üîÑ Danh s√°ch Phi·∫øu gia h·∫°n", staff.getRentalExtensionFormIds(), "Rental Extension");
        TitledPane tpRentals = createListTitledPane("üè† Danh s√°ch Phi·∫øu thu√™", staff.getRentalFormIds(), "Rental Form");
        accordion.getPanes().addAll(tpInvoices, tpExtensions, tpRentals);
        if (!accordion.getPanes().isEmpty()) {
            accordion.setExpandedPane(accordion.getPanes().get(0));
        }
        relatedBox.getChildren().add(accordion);

        // ===== SECTION 4: Action Buttons (Quay l·∫°i, Ch·ªânh s·ª≠a nh√¢n vi√™n) =====
        HBox actionBox = new HBox(10);
        actionBox.setPadding(new Insets(8, 0, 0, 0));
        Button btnBack = new Button("¬´ Quay l·∫°i");
        btnBack.setOnAction(e -> tableStaff.getSelectionModel().clearSelection());
        Button btnEditStaff = new Button("Ch·ªânh s·ª≠a nh√¢n vi√™n");
        btnEditStaff.setOnAction(e -> showEditForm(staff));
        actionBox.getChildren().addAll(btnBack, btnEditStaff);

        // Th√™m v√†o detailPane
        detailPane.getChildren().addAll(basicBox, accountBox, relatedBox, actionBox);
    }

    /**
     * Hi·ªÉn th·ªã form Ch·ªânh s·ª≠a nh√¢n vi√™n (prefill data t·ª´ staff ƒë√£ ch·ªçn).
     */
    private void showEditForm(ResponseStaffDto staff) {
        detailPane.getChildren().clear();

        Label title = new Label("¬ª Ch·ªânh s·ª≠a nh√¢n vi√™n - ID: " + staff.getId());
        title.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(8));

        // 1. H·ªç & T√™n
        Label lblFullName = new Label("H·ªç & T√™n:");
        TextField tfFullName = new TextField(staff.getFullName());
        grid.add(lblFullName, 0, 0);
        grid.add(tfFullName,  1, 0);

        // 2. Tu·ªïi
        Label lblAge = new Label("Tu·ªïi:");
        TextField tfAge = new TextField(String.valueOf(staff.getAge()));
        grid.add(lblAge,  0, 1);
        grid.add(tfAge,   1, 1);

        // 3. CMND/CCCD
        Label lblIdNum = new Label("CMND/CCCD:");
        TextField tfIdNum = new TextField(staff.getIdentificationNumber());
        grid.add(lblIdNum, 0, 2);
        grid.add(tfIdNum,  1, 2);

        // 4. ƒê·ªãa ch·ªâ
        Label lblAddress = new Label("ƒê·ªãa ch·ªâ:");
        TextField tfAddress = new TextField(staff.getAddress());
        grid.add(lblAddress, 0, 3);
        grid.add(tfAddress,  1, 3);

        // 5. Gi·ªõi t√≠nh
        Label lblSex = new Label("Gi·ªõi t√≠nh:");
        ComboBox<Sex> cbSex = new ComboBox<>(FXCollections.observableArrayList(Sex.values()));
        cbSex.setValue(staff.getSex());
        grid.add(lblSex, 0, 4);
        grid.add(cbSex,  1, 4);

        // 6. H·ªá s·ªë l∆∞∆°ng
        Label lblSalaryMul = new Label("H·ªá s·ªë l∆∞∆°ng:");
        TextField tfSalaryMul = new TextField(String.valueOf(staff.getSalaryMultiplier()));
        grid.add(lblSalaryMul, 0, 5);
        grid.add(tfSalaryMul,  1, 5);

        // 7. Ch·ª©c v·ª•
        Label lblPosition = new Label("Ch·ª©c v·ª•:");
        ComboBox<Position> cbPosition = new ComboBox<>(FXCollections.observableArrayList(getAllPositions()));
        cbPosition.setValue(staff.getPosition());
        grid.add(lblPosition, 0, 6);
        grid.add(cbPosition,  1, 6);

        // 8. Account ID
        Label lblAccountId = new Label("Account ID:");
        TextField tfAccountId = new TextField();
        if (staff.getAccount() != null) {
            tfAccountId.setText(String.valueOf(staff.getAccount().getId()));
        }
        tfAccountId.setPromptText("VD: 10 (th·∫£ tr·ªëng n·∫øu kh√¥ng)");
        grid.add(lblAccountId, 0, 7);
        grid.add(tfAccountId,  1, 7);

        // N√∫t ‚ÄúL∆∞u‚Äù + ‚ÄúH·ªßy‚Äù
        HBox btnBox = new HBox(10);
        btnBox.setPadding(new Insets(8, 0, 0, 0));
        Button btnSave = new Button("L∆∞u");
        Button btnCancel = new Button("H·ªßy");

        // H·ªßy ‚Üí quay v·ªÅ hi·ªÉn th·ªã detail c≈©
        btnCancel.setOnAction(e -> showStaffDetail(staff));

        // L∆∞u ‚Üí validate + c·∫≠p nh·∫≠t staff (trong ObservableList)
        btnSave.setOnAction(e -> {
            // 1. L·∫•y d·ªØ li·ªáu t·ª´ form
            String fullName = tfFullName.getText().trim();
            String ageStr   = tfAge.getText().trim();
            String idNum    = tfIdNum.getText().trim();
            String address  = tfAddress.getText().trim();
            Sex sex         = cbSex.getValue();
            String salaryMulStr = tfSalaryMul.getText().trim();
            Position position   = cbPosition.getValue();
            String accountIdStr = tfAccountId.getText().trim();

            // 2. Validate
            if (fullName.isEmpty() || ageStr.isEmpty() || idNum.isEmpty() ||
                    address.isEmpty()  || sex == null   || salaryMulStr.isEmpty() || position == null) {
                showErrorAlert("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc!");
                return;
            }

            // 3. Ch·∫∑n tr√πng fullName (n·∫øu t√™n m·ªõi ƒë√£ c√≥ ·ªü staff kh√°c)
            boolean exists = staffList.stream()
                    .filter(s -> s.getId() != staff.getId())
                    .anyMatch(s -> s.getFullName().equalsIgnoreCase(fullName));
            if (exists) {
                showErrorAlert("Tr√πng t√™n", "ƒê√£ c√≥ nh√¢n vi√™n t√™n \"" + fullName + "\" r·ªìi!");
                return;
            }

            Integer age;
            Float salaryMul;
            Integer accountId = null;
            try {
                age = Integer.parseInt(ageStr);
            } catch (NumberFormatException ex) {
                showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "Tu·ªïi ph·∫£i l√† s·ªë nguy√™n.");
                return;
            }
            try {
                salaryMul = Float.parseFloat(salaryMulStr);
            } catch (NumberFormatException ex) {
                showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "H·ªá s·ªë l∆∞∆°ng ph·∫£i l√† s·ªë (float).");
                return;
            }
            if (!accountIdStr.isEmpty()) {
                try {
                    accountId = Integer.parseInt(accountIdStr);
                } catch (NumberFormatException ex) {
                    showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "Account ID ph·∫£i l√† s·ªë nguy√™n ho·∫∑c ƒë·ªÉ tr·ªëng.");
                    return;
                }
            }

            // 4. C·∫≠p nh·∫≠t l·∫°i staff
            staff.setFullName(fullName);
            staff.setAge(age);
            staff.setIdentificationNumber(idNum);
            staff.setAddress(address);
            staff.setSex(sex);
            staff.setSalaryMultiplier(salaryMul);
            staff.setPosition(position);

            if (accountId != null) {
                Account acc = staff.getAccount();
                if (acc == null) {
                    acc = new Account();
                    acc.setId(accountId);
                    acc.setUsername("user" + accountId);
                    acc.setPassword("pass" + accountId);
                    staff.setAccount(acc);
                } else {
                    acc.setId(accountId);
                    acc.setUsername("user" + accountId);
                    acc.setPassword("pass" + accountId);
                }
            } else {
                staff.setAccount(null);
            }

            // 5. Refresh table v√† show detail m·ªõi
            tableStaff.refresh();
            showStaffDetail(staff);
            showInfoAlert("C·∫≠p nh·∫≠t th√†nh c√¥ng", "Th√¥ng tin nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
        });

        btnBox.getChildren().addAll(btnSave, btnCancel);
        detailPane.getChildren().addAll(title, grid, btnBox);
    }


    /**
     * Khi nh·∫•n ‚ÄúT·∫°o t√†i kho·∫£n‚Äù ‚Üí hi·ªÉn th·ªã form Create ngay trong detailPane.
     * Form n√†y ch·ª©a input cho c√°c tr∆∞·ªùng:
     *   - fullName, age, identificationNumber, address, sex, salaryMultiplier, position, accountId
     */
    private void showCreateStaffForm() {
        detailPane.getChildren().clear();

        Label title = new Label("¬ª T·∫°o m·ªõi nh√¢n vi√™n");
        title.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        // GridPane ƒë·ªÉ s·∫Øp x·∫øp label + input
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(8));

        // 1. H·ªç & T√™n
        Label lblFullName = new Label("H·ªç & T√™n:");
        TextField tfFullName = new TextField();
        grid.add(lblFullName, 0, 0);
        grid.add(tfFullName, 1, 0);

        // 2. Tu·ªïi
        Label lblAge = new Label("Tu·ªïi:");
        TextField tfAge = new TextField();
        tfAge.setPromptText("VD: 30");
        grid.add(lblAge, 0, 1);
        grid.add(tfAge, 1, 1);

        // 3. CMND/CCCD
        Label lblIdNum = new Label("CMND/CCCD:");
        TextField tfIdNum = new TextField();
        grid.add(lblIdNum, 0, 2);
        grid.add(tfIdNum, 1, 2);

        // 4. ƒê·ªãa ch·ªâ
        Label lblAddress = new Label("ƒê·ªãa ch·ªâ:");
        TextField tfAddress = new TextField();
        tfAddress.setPromptText("V√≠ d·ª•: S·ªë 123, Ph∆∞·ªùng X, Qu·∫≠n Y, H√† N·ªôi");
        grid.add(lblAddress, 0, 3);
        grid.add(tfAddress, 1, 3);

        // 5. Gi·ªõi t√≠nh (ComboBox)
        Label lblSex = new Label("Gi·ªõi t√≠nh:");
        ComboBox<Sex> cbSex = new ComboBox<>(FXCollections.observableArrayList(Sex.values()));
        cbSex.setPromptText("Ch·ªçn gi·ªõi t√≠nh");
        grid.add(lblSex, 0, 4);
        grid.add(cbSex, 1, 4);

        // 6. H·ªá s·ªë l∆∞∆°ng
        Label lblSalaryMul = new Label("H·ªá s·ªë l∆∞∆°ng:");
        TextField tfSalaryMul = new TextField();
        tfSalaryMul.setPromptText("VD: 1.2");
        grid.add(lblSalaryMul, 0, 5);
        grid.add(tfSalaryMul, 1, 5);

        // 7. Ch·ª©c v·ª• (ComboBox Position)
        Label lblPosition = new Label("Ch·ª©c v·ª•:");
        ComboBox<Position> cbPosition = new ComboBox<>(FXCollections.observableArrayList(getAllPositions()));
        cbPosition.setPromptText("Ch·ªçn ch·ª©c v·ª•");
        grid.add(lblPosition, 0, 6);
        grid.add(cbPosition, 1, 6);

        // 8. Account ID (n·∫øu mu·ªën g√°n account ƒë√£ c√≥)
        Label lblAccountId = new Label("Account ID:");
        TextField tfAccountId = new TextField();
        tfAccountId.setPromptText("VD: 10 (ho·∫∑c ƒë·ªÉ tr·ªëng)");
        grid.add(lblAccountId, 0, 7);
        grid.add(tfAccountId, 1, 7);

        // N√∫t ‚ÄúL∆∞u‚Äù v√† ‚ÄúH·ªßy‚Äù
        HBox btnBox = new HBox(10);
        btnBox.setPadding(new Insets(8, 0, 0, 0));
        Button btnSave = new Button("L∆∞u");
        Button btnCancel = new Button("H·ªßy");

        // H·ªßy ‚Üí quay v·ªÅ placeholder
        btnCancel.setOnAction(e -> clearDetailPane());

        // L∆∞u ‚Üí validate + th√™m staff m·ªõi v√†o staffList
        btnSave.setOnAction(e -> {
            // 1. L·∫•y d·ªØ li·ªáu t·ª´ form
            String fullName = tfFullName.getText().trim();
            String ageStr = tfAge.getText().trim();
            String idNum = tfIdNum.getText().trim();
            String address = tfAddress.getText().trim();
            Sex sex = cbSex.getValue();
            String salaryMulStr = tfSalaryMul.getText().trim();
            Position position = cbPosition.getValue();
            String accountIdStr = tfAccountId.getText().trim();

            // 2. Validate ƒë∆°n gi·∫£n
            if (fullName.isEmpty() || ageStr.isEmpty() || idNum.isEmpty() ||
                    address.isEmpty() || sex == null || salaryMulStr.isEmpty() || position == null) {
                showErrorAlert("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc!");
                return;
            }

            Integer age;
            Float salaryMul;
            Integer accountId = null;
            try {
                age = Integer.parseInt(ageStr);
            } catch (NumberFormatException ex) {
                showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "Tu·ªïi ph·∫£i l√† s·ªë nguy√™n.");
                return;
            }
            try {
                salaryMul = Float.parseFloat(salaryMulStr);
            } catch (NumberFormatException ex) {
                showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "H·ªá s·ªë l∆∞∆°ng ph·∫£i l√† s·ªë (float).");
                return;
            }
            if (!accountIdStr.isEmpty()) {
                try {
                    accountId = Integer.parseInt(accountIdStr);
                } catch (NumberFormatException ex) {
                    showErrorAlert("Sai ƒë·ªãnh d·∫°ng", "Account ID ph·∫£i l√† s·ªë nguy√™n ho·∫∑c ƒë·ªÉ tr·ªëng.");
                    return;
                }
            }

            // 3. T·∫°o Account n·∫øu c√≥ accountId (mock)
            Account acc = null;
            if (accountId != null) {
                // B·∫°n c√≥ th·ªÉ load Account th·ª±c t·ª´ DB theo accountId
                acc = new Account();
                acc.setId(accountId);
                acc.setUsername("user" + accountId);
                acc.setPassword("pass" + accountId);
            }

            // 4. T·∫°o c√°c danh s√°ch r·ªóng cho invoice, extension, rental
            List<Integer> invs = FXCollections.observableArrayList();
            List<Integer> exts = FXCollections.observableArrayList();
            List<Integer> rents = FXCollections.observableArrayList();

            // 5. L·∫•y ID m·ªõi = max(ID) + 1
            int newId = staffList.stream().mapToInt(ResponseStaffDto::getId).max().orElse(0) + 1;
            ResponseStaffDto newStaff = new ResponseStaffDto(
                    newId,
                    fullName,
                    age,
                    idNum,
                    address,
                    sex,
                    salaryMul,
                    position,
                    acc,
                    invs,
                    exts,
                    rents
            );

            // 6. Th√™m v√†o staffList ‚Üí TableView t·ª± refresh
            staffList.add(newStaff);

            // 7. Ch·ªçn lu√¥n staff m·ªõi ƒë·ªÉ show detail
            tableStaff.getSelectionModel().select(newStaff);

            // 8. Th√¥ng b√°o th√†nh c√¥ng
            showInfoAlert("T·∫°o th√†nh c√¥ng", "ƒê√£ th√™m nh√¢n vi√™n m·ªõi: " + fullName);
        });

        btnBox.getChildren().addAll(btnSave, btnCancel);

        // ƒê·ªï title + grid + btnBox v√†o detailPane
        detailPane.getChildren().addAll(title, grid, btnBox);
    }

    /**
     * T·∫°o 1 TitledPane v·ªõi n·ªôi dung l√† danh s√°ch c√°c ID (List<Integer>).
     */
    private TitledPane createListTitledPane(String title, List<Integer> ids, String prefix) {
        VBox box = new VBox(4);
        box.setPadding(new Insets(6));

        if (ids == null || ids.isEmpty()) {
            Label empty = new Label("Ch∆∞a c√≥ m·ª•c n√†o");
            empty.setStyle("-fx-font-style: italic; -fx-text-fill: #666;");
            box.getChildren().add(empty);
        } else {
            for (Integer id : ids) {
                Hyperlink link = new Hyperlink(prefix + " #" + id);
                link.setOnAction(e -> showInfoAlert("Xem chi ti·∫øt", "B·∫°n ch·ªçn: " + prefix + " #" + id));
                box.getChildren().add(link);
            }
        }

        TitledPane tp = new TitledPane(title + " (" + (ids == null ? 0 : ids.size()) + ")", box);
        tp.setAnimated(true);
        return tp;
    }

    /**
     * Hi·ªÉn th·ªã Alert th√¥ng tin (d√πng ƒë·ªÉ mock).
     */
    private void showInfoAlert(String header, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(header);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    /**
     * Hi·ªÉn th·ªã Alert l·ªói (d√πng ƒë·ªÉ mock).
     */
    private void showErrorAlert(String header, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(header);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    /**
     * D·ªØ li·ªáu m·∫´u ƒë·ªÉ demo (gi·ªØ nguy√™n c√°ch seeding hi·ªán t·∫°i).
     */
    private List<ResponseStaffDto> getSampleData() {
        // Gi·∫£ l·∫≠p Account
        Account accB = new Account();
        accB.setId(10);
        accB.setUsername("accB");
        accB.setPassword("passwordB");
        Account accC = new Account();
        accC.setId(11);
        accC.setUsername("accC");
        accC.setPassword("passwordC");

        // Gi·∫£ l·∫≠p Position
        Position positionNhanVien = new Position();
        positionNhanVien.setId(1);
        positionNhanVien.setName("Nh√¢n vi√™n");
        Position positionKyThuat = new Position();
        positionKyThuat.setId(2);
        positionKyThuat.setName("K·ªπ thu·∫≠t");

        return Arrays.asList(
                new ResponseStaffDto(
                        1,
                        "Nguy·ªÖn VƒÉn A",
                        30,
                        "012345678",
                        "S·ªë 123, Ph∆∞·ªùng X, Qu·∫≠n Y, H√† N·ªôi",
                        Sex.MALE,
                        1.5f,
                        positionNhanVien,
                        null,              // ch∆∞a c√≥ account
                        Arrays.asList(101, 102),
                        Arrays.asList(201),
                        Arrays.asList(301, 302)
                ),
                new ResponseStaffDto(
                        2,
                        "Tr·∫ßn Th·ªã B",
                        25,
                        "098765432",
                        "S·ªë 456, Ph∆∞·ªùng Z, Qu·∫≠n W, TP. H·ªì Ch√≠ Minh",
                        Sex.FEMALE,
                        1.2f,
                        positionKyThuat,
                        accB,
                        FXCollections.observableArrayList(), // no invoice
                        FXCollections.observableArrayList(), // no extension
                        Arrays.asList(401)                   // 1 rental
                ),
                new ResponseStaffDto(
                        3,
                        "L√™ VƒÉn C",
                        28,
                        "023456789",
                        "S·ªë 789, Ph∆∞·ªùng A, Qu·∫≠n B, ƒê√† N·∫µng",
                        Sex.MALE,
                        1.0f,
                        positionNhanVien,
                        accC,
                        Arrays.asList(103),
                        Arrays.asList(202, 203),
                        FXCollections.observableArrayList()  // no rental
                )
        );
    }

    /**
     * Tr·∫£ v·ªÅ t·∫•t c·∫£ Position (gi·∫£ l·∫≠p).
     * N·∫øu b·∫°n c√≥ service th·ª±c, h√£y thay th·∫ø b·∫±ng call service.
     */
    private List<Position> getAllPositions() {
        Position positionQL = new Position();
        positionQL.setId(3);
        positionQL.setName("Qu·∫£n l√Ω");
        Position positionNV = new Position();
        positionNV.setId(1);
        positionNV.setName("Nh√¢n vi√™n");
        Position positionKT = new Position();
        positionKT.setId(2);
        positionKT.setName("K·ªπ thu·∫≠t");
        return Arrays.asList(positionQL, positionNV, positionKT);
    }

    /**
     * Hi·ªÉn th·ªã form T·∫°o t√†i kho·∫£n (userName, passWord, userRoleId) ngay trong detailPane.
     * staff ƒë√£ ch·ªçn s·∫Ω ƒë∆∞·ª£c g√°n Account m·ªõi sau khi l∆∞u.
     */
    private void showCreateAccountForm(ResponseStaffDto staff) {
        detailPane.getChildren().clear();

        Label title = new Label("¬ª T·∫°o t√†i kho·∫£n cho: " + staff.getFullName());
        title.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(8));

        // 1. userName
        Label lblUserName = new Label("Username:");
        TextField tfUserName = new TextField();
        tfUserName.setPromptText("Nh·∫≠p username");
        grid.add(lblUserName, 0, 0);
        grid.add(tfUserName, 1, 0);

        // 2. passWord
        Label lblPassword = new Label("Password:");
        PasswordField pfPassword = new PasswordField();
        pfPassword.setPromptText("Nh·∫≠p password");
        grid.add(lblPassword, 0, 1);
        grid.add(pfPassword, 1, 1);

        // 3. userRoleId (ComboBox n·∫øu b·∫°n c√≥ danh s√°ch role)
        Label lblRoleId = new Label("Role ID:");
        ComboBox<Integer> cbRoleId = new ComboBox<>(FXCollections.observableArrayList(
                1, 2, 3  // gi·∫£ ƒë·ªãnh: 1=Admin, 2=Manager, 3=Staff (b·∫°n ƒëi·ªÅu ch·ªânh theo model th·ª±c)
        ));
        cbRoleId.setPromptText("Ch·ªçn Role ID");
        grid.add(lblRoleId, 0, 2);
        grid.add(cbRoleId, 1, 2);

        // N√∫t ‚ÄúL∆∞u‚Äù v√† ‚ÄúH·ªßy‚Äù
        HBox btnBox = new HBox(10);
        btnBox.setPadding(new Insets(8, 0, 0, 0));
        Button btnSave = new Button("L∆∞u");
        Button btnCancel = new Button("H·ªßy");

        // H·ªßy ‚Üí quay l·∫°i detail c≈© (ch∆∞a c√≥ account)
        btnCancel.setOnAction(e -> showStaffDetail(staff));

        // L∆∞u ‚Üí validate + g√°n Account cho staff
        btnSave.setOnAction(e -> {
            String userName = tfUserName.getText().trim();
            String passWord = pfPassword.getText().trim();
            Integer roleId   = cbRoleId.getValue();

            if (userName.isEmpty() || passWord.isEmpty() || roleId == null) {
                showErrorAlert("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Username, Password v√† Role ID!");
                return;
            }

            // 1. Ki·ªÉm tra username tr√πng n·∫øu c·∫ßn (n·∫øu b·∫°n mu·ªën)
            boolean exists = staffList.stream()
                    .map(ResponseStaffDto::getAccount)
                    .filter(acc -> acc != null)
                    .anyMatch(acc -> acc.getUsername().equalsIgnoreCase(userName));
            if (exists) {
                showErrorAlert("Tr√πng t√™n t√†i kho·∫£n", "Username \"" + userName + "\" ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn kh√°c.");
                return;
            }

            // 2. T·∫°o Account v√† g√°n v√†o staff
            Account newAcc = new Account();
            newAcc.setUsername(userName);
            newAcc.setPassword(passWord);
            newAcc.setUserRoleId(roleId);
            // Gi·∫£ ƒë·ªãnh b·∫°n c√≥ setter setId() ho·∫∑c h·ªá th·ªëng auto g√°n ID
            // newAcc.setId(autoGeneratedId);

            staff.setAccount(newAcc);

            // 3. Refresh TableView ƒë·ªÉ hi·ªÉn th·ªã c·ªôt Username m·ªõi
            tableStaff.refresh();

            // 4. Quay v·ªÅ show detail (gi·ªù ƒë√£ c√≥ account)
            showStaffDetail(staff);

            showInfoAlert("T·∫°o t√†i kho·∫£n th√†nh c√¥ng", "ƒê√£ g√°n t√†i kho·∫£n cho " + staff.getFullName());
        });

        btnBox.getChildren().addAll(btnSave, btnCancel);

        detailPane.getChildren().addAll(title, grid, btnBox);
    }

}

