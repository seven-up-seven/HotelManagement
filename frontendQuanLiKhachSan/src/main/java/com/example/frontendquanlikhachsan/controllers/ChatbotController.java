package com.example.frontendquanlikhachsan.controllers;

import com.example.frontendquanlikhachsan.ApiHttpClientCaller;
import com.example.frontendquanlikhachsan.entity.account.ResponseAccountDto;
import com.example.frontendquanlikhachsan.entity.block.ResponseBlockDto;
import com.example.frontendquanlikhachsan.entity.bookingconfirmationform.ResponseBookingConfirmationFormDto;
import com.example.frontendquanlikhachsan.entity.floor.ResponseFloorDto;
import com.example.frontendquanlikhachsan.entity.guest.ResponseGuestDto;
import com.example.frontendquanlikhachsan.entity.history.ResponseHistoryDto;
import com.example.frontendquanlikhachsan.entity.invoice.ResponseInvoiceDto;
import com.example.frontendquanlikhachsan.entity.invoicedetail.ResponseInvoiceDetailDto;
import com.example.frontendquanlikhachsan.entity.permission.ResponsePermissionDto;
import com.example.frontendquanlikhachsan.entity.position.ResponsePositionDto;
import com.example.frontendquanlikhachsan.entity.rentalExtensionForm.ResponseRentalExtensionFormDto;
import com.example.frontendquanlikhachsan.entity.rentalForm.ResponseRentalFormDto;
import com.example.frontendquanlikhachsan.entity.rentalFormDetail.ResponseRentalFormDetailDto;
import com.example.frontendquanlikhachsan.entity.revenueReport.ResponseRevenueReportDto;
import com.example.frontendquanlikhachsan.entity.revenueReportDetail.ResponseRevenueReportDetailDto;
import com.example.frontendquanlikhachsan.entity.room.ResponseRoomDto;
import com.example.frontendquanlikhachsan.entity.roomType.ResponseRoomTypeDto;
import com.example.frontendquanlikhachsan.entity.staff.ResponseStaffDto;
import com.example.frontendquanlikhachsan.entity.userRole.ResponseUserRoleDto;
import com.example.frontendquanlikhachsan.entity.userRolePermission.ResponseUserRolePermissionDto;
import com.example.frontendquanlikhachsan.entity.variable.ResponseVariableDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class ChatbotController {
    @FXML private ListView<String> chatListView;
    @FXML private TextArea inputArea;

    private final String systemPrompt = "B·∫°n l√† chatbot h·ªó tr·ª£ cho ph·∫ßn m·ªÅm qu·∫£n l√Ω kh√°ch s·∫°n, ƒë∆∞·ª£c t·∫°o b·ªüi Nh√≥m 5 Java. Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi, kh√¥ng ƒë∆∞·ª£c b·ªãa ƒë·∫∑t th√¥ng tin. D·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p bao g·ªìm th√¥ng tin chi ti·∫øt v·ªÅ kh√°ch s·∫°n. H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ng·∫Øn g·ªçn, ch√≠nh x√°c v√† s·ª≠ d·ª•ng d·ªØ li·ªáu ph√π h·ª£p. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan, tr·∫£ l·ªùi 'Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.'";
    private final String apiKey = "AIzaSyBf0xyHSQW2A4Y2Tf6d-0R0GD_8XRz0WcE";
    private final String url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey;

    private String knowledgeBase = "";

    private final ObjectMapper mapper = new ObjectMapper()
            .registerModule(new JavaTimeModule());

    @FXML
    public void initialize() {
        chatListView.getItems().add("ü§ñ Chatbot s·∫µn s√†ng tr·∫£ l·ªùi c√¢u h·ªèi!");
        loadKnowledgeBase();
        // Debug: Log knowledgeBase size
        System.out.println("KnowledgeBase size: " + knowledgeBase.length() + " characters");
    }

    @FXML
    public void handleSend() {
        String question = inputArea.getText().trim();
        if (question.isEmpty()) return;

        chatListView.getItems().add("üßë‚Äçüíº " + question);
        inputArea.clear();

        new Thread(() -> {
            String response = callAI(question);
            Platform.runLater(() -> chatListView.getItems().add("ü§ñ " + response));
        }).start();
    }

    private void loadKnowledgeBase() {
        StringBuilder kb = new StringBuilder();
        try {
            kb.append("# Th√¥ng tin c∆° s·ªü d·ªØ li·ªáu kh√°ch s·∫°n\n\n");

            // Account
            var json = ApiHttpClientCaller.call("account/get-all-no-page", ApiHttpClientCaller.Method.GET, null);
            List<ResponseAccountDto> accounts = Arrays.asList(mapper.readValue(json, ResponseAccountDto[].class));
            kb.append("- C√≥ ").append(accounts.size()).append(" t√†i kho·∫£n ng∆∞·ªùi d√πng\n");
            kb.append("  + Qu·∫£n tr·ªã vi√™n: ").append(accounts.stream().filter(a -> a.getUserRoleName() != null && a.getUserRoleName().equalsIgnoreCase("Admin")).count()).append(" t√†i kho·∫£n\n");
            kb.append("  + Nh√¢n vi√™n: ").append(accounts.stream().filter(a -> a.getUserRoleName() != null && a.getUserRoleName().equalsIgnoreCase("Staff")).count()).append(" t√†i kho·∫£n\n");
            kb.append("  + Top 3 t√†i kho·∫£n:\n");
            for (ResponseAccountDto account : accounts.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(account.getId())
                        .append(", T√™n ƒëƒÉng nh·∫≠p: ").append(account.getUsername() != null ? account.getUsername() : "N/A")
                        .append(", Vai tr√≤: ").append(account.getUserRoleName() != null ? account.getUserRoleName() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // Block
            json = ApiHttpClientCaller.call("block", ApiHttpClientCaller.Method.GET, null);
            List<ResponseBlockDto> blocks = Arrays.asList(mapper.readValue(json, ResponseBlockDto[].class));
            kb.append("- C√≥ ").append(blocks.size()).append(" t√≤a trong kh√°ch s·∫°n\n");
            int totalFloors = blocks.stream().mapToInt(b -> b.getFloorIds() != null ? b.getFloorIds().size() : 0).sum();
            kb.append("  + T·ªïng s·ªë t·∫ßng: ").append(totalFloors).append("\n");
            for (ResponseBlockDto block : blocks.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(block.getId())
                        .append(", T√™n: ").append(block.getName() != null ? block.getName() : "N/A")
                        .append(", S·ªë t·∫ßng: ").append(block.getFloorIds() != null ? block.getFloorIds().size() : 0)
                        .append("\n");
            }
            kb.append("\n");

            // BookingConfirmationForm
            json = ApiHttpClientCaller.call("booking-confirmation-form", ApiHttpClientCaller.Method.GET, null);
            List<ResponseBookingConfirmationFormDto> bookingForms = Arrays.asList(mapper.readValue(json, ResponseBookingConfirmationFormDto[].class));
            kb.append("- C√≥ ").append(bookingForms.size()).append(" phi·∫øu x√°c nh·∫≠n ƒë·∫∑t ph√≤ng\n");
            long pendingBookings = bookingForms.stream().filter(f -> f.getBookingState() != null && f.getBookingState().equals("PENDING")).count();
            kb.append("  + ƒêang ch·ªù x√°c nh·∫≠n: ").append(pendingBookings).append(" phi·∫øu\n");
            kb.append("  + ƒê√£ x√°c nh·∫≠n: ").append(bookingForms.size() - pendingBookings).append(" phi·∫øu\n");
            kb.append("  + 3 phi·∫øu g·∫ßn ƒë√¢y:\n");
            for (ResponseBookingConfirmationFormDto form : bookingForms.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(form.getId())
                        .append(", Tr·∫°ng th√°i: ").append(form.getBookingState() != null ? form.getBookingState() : "N/A")
                        .append(", Kh√°ch: ").append(form.getGuestName() != null ? form.getGuestName() : "N/A")
                        .append(", Ph√≤ng: ").append(form.getRoomName() != null ? form.getRoomName() : "N/A")
                        .append(", Ng√†y ƒë·∫∑t: ").append(form.getBookingDate() != null ? form.getBookingDate() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // Floor
            json = ApiHttpClientCaller.call("floor", ApiHttpClientCaller.Method.GET, null);
            List<ResponseFloorDto> floors = Arrays.asList(mapper.readValue(json, ResponseFloorDto[].class));
            kb.append("- C√≥ ").append(floors.size()).append(" t·∫ßng trong kh√°ch s·∫°n\n");
            int totalRooms = floors.stream().mapToInt(f -> f.getRoomIds() != null ? f.getRoomIds().size() : 0).sum();
            kb.append("  + T·ªïng s·ªë ph√≤ng: ").append(totalRooms).append("\n");
            for (ResponseFloorDto floor : floors.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(floor.getId())
                        .append(", T√™n: ").append(floor.getName() != null ? floor.getName() : "N/A")
                        .append(", T√≤a: ").append(floor.getBlockName() != null ? floor.getBlockName() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // Guest
            json = ApiHttpClientCaller.call("guest", ApiHttpClientCaller.Method.GET, null);
            List<ResponseGuestDto> guests = Arrays.asList(mapper.readValue(json, ResponseGuestDto[].class));
            kb.append("- C√≥ ").append(guests.size()).append(" kh√°ch h√†ng\n");
            for (ResponseGuestDto guest : guests.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(guest.getId())
                        .append(", T√™n: ").append(guest.getName() != null ? guest.getName() : "N/A")
                        .append(", SƒêT: ").append(guest.getPhoneNumber() != null ? guest.getPhoneNumber() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // Invoice
            json = ApiHttpClientCaller.call("invoice", ApiHttpClientCaller.Method.GET, null);
            List<ResponseInvoiceDto> invoices = Arrays.asList(mapper.readValue(json, ResponseInvoiceDto[].class));
            kb.append("- C√≥ ").append(invoices.size()).append(" h√≥a ƒë∆°n\n");
            double totalRevenue = invoices.stream().mapToDouble(i -> i.getTotalReservationCost()).sum();
            kb.append("  + T·ªïng doanh thu: ").append(String.format("%,.0f", totalRevenue)).append(" VND\n");
            kb.append("  + 3 h√≥a ƒë∆°n g·∫ßn ƒë√¢y:\n");
            for (ResponseInvoiceDto invoice : invoices.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(invoice.getId())
                        .append(", T·ªïng ti·ªÅn: ").append(String.format("%,.0f", invoice.getTotalReservationCost())).append(" VND")
                        .append(", Kh√°ch: ").append(invoice.getPayingGuestName() != null ? invoice.getPayingGuestName() : "N/A")
                        .append(", Ng√†y t·∫°o: ").append(invoice.getCreatedAt() != null ? invoice.getCreatedAt() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // Room
            json = ApiHttpClientCaller.call("room", ApiHttpClientCaller.Method.GET, null);
            List<ResponseRoomDto> rooms = Arrays.asList(mapper.readValue(json, ResponseRoomDto[].class));
            kb.append("- C√≥ ").append(rooms.size()).append(" ph√≤ng trong kh√°ch s·∫°n\n");
            long availableRooms = rooms.stream().filter(r -> r.getRoomState() != null && r.getRoomState().equals("AVAILABLE")).count();
            kb.append("  + Ph√≤ng tr·ªëng: ").append(availableRooms).append("\n");
            kb.append("  + Ph√≤ng ƒëang s·ª≠ d·ª•ng: ").append(rooms.size() - availableRooms).append("\n");
            kb.append("  + 3 ph√≤ng m·∫´u:\n");
            for (ResponseRoomDto room : rooms.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(room.getId())
                        .append(", T√™n: ").append(room.getName() != null ? room.getName() : "N/A")
                        .append(", Tr·∫°ng th√°i: ").append(room.getRoomState() != null ? room.getRoomState() : "N/A")
                        .append(", Lo·∫°i: ").append(room.getRoomTypeName() != null ? room.getRoomTypeName() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // RoomType
            json = ApiHttpClientCaller.call("room-type", ApiHttpClientCaller.Method.GET, null);
            List<ResponseRoomTypeDto> roomTypes = Arrays.asList(mapper.readValue(json, ResponseRoomTypeDto[].class));
            kb.append("- C√≥ ").append(roomTypes.size()).append(" lo·∫°i ph√≤ng\n");
            double avgRoomPrice = roomTypes.stream().mapToDouble(rt -> rt.getPrice()).average().orElse(0);
            kb.append("  + Gi√° trung b√¨nh: ").append(String.format("%,.0f", avgRoomPrice)).append(" VND/ƒë√™m\n");
            kb.append("  + C√°c lo·∫°i ph√≤ng:\n");
            for (ResponseRoomTypeDto roomType : roomTypes.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(roomType.getId())
                        .append(", T√™n: ").append(roomType.getName() != null ? roomType.getName() : "N/A")
                        .append(", Gi√°: ").append(String.format("%,.0f", roomType.getPrice())).append(" VND")
                        .append("\n");
            }
            kb.append("\n");

            // Staff
            json = ApiHttpClientCaller.call("staff", ApiHttpClientCaller.Method.GET, null);
            List<ResponseStaffDto> staff = Arrays.asList(mapper.readValue(json, ResponseStaffDto[].class));
            kb.append("- C√≥ ").append(staff.size()).append(" nh√¢n vi√™n\n");
            for (ResponseStaffDto staffMember : staff.stream().limit(3).collect(Collectors.toList())) {
                kb.append("    * ID: ").append(staffMember.getId())
                        .append(", T√™n: ").append(staffMember.getFullName() != null ? staffMember.getFullName() : "N/A")
                        .append(", V·ªã tr√≠: ").append(staffMember.getPositionName() != null ? staffMember.getPositionName() : "N/A")
                        .append("\n");
            }
            kb.append("\n");

            // RevenueReport
            json = ApiHttpClientCaller.call("revenue-report", ApiHttpClientCaller.Method.GET, null);
            List<ResponseRevenueReportDto> revenueReports = Arrays.asList(mapper.readValue(json, ResponseRevenueReportDto[].class));
            kb.append("- C√≥ ").append(revenueReports.size()).append(" b√°o c√°o doanh thu\n");
            ResponseRevenueReportDto latestReport = revenueReports.stream()
                    .max(Comparator.comparing(r -> r.getYear() * 100 + r.getMonth()))
                    .orElse(null);
            if (latestReport != null) {
                kb.append("  + B√°o c√°o m·ªõi nh·∫•t: Th√°ng ").append(latestReport.getMonth())
                        .append("/").append(latestReport.getYear())
                        .append(", Doanh thu: ").append(String.format("%,.0f", latestReport.getTotalMonthRevenue())).append(" VND\n");
            }
            kb.append("\n");

            // Financial Overview
            kb.append("# T·ªïng quan t√†i ch√≠nh\n");
            kb.append("- T·ªïng doanh thu t·ª´ h√≥a ƒë∆°n: ").append(String.format("%,.0f", totalRevenue)).append(" VND\n");
            double totalRoomTypeRevenue = roomTypes.stream().mapToDouble(rt -> rt.getPrice() * rooms.stream().filter(r -> r.getRoomTypeName() != null && r.getRoomTypeName().equals(rt.getName())).count()).sum();
            kb.append("- Doanh thu ti·ªÅm nƒÉng t·ª´ lo·∫°i ph√≤ng: ").append(String.format("%,.0f", totalRoomTypeRevenue)).append(" VND\n");
            kb.append("- S·ªë ph√≤ng tr·ªëng: ").append(availableRooms).append("\n");
            kb.append("- S·ªë phi·∫øu ƒë·∫∑t ph√≤ng ƒëang ch·ªù: ").append(pendingBookings).append("\n");

            knowledgeBase = kb.toString();
            System.out.println("KnowledgeBase size: " + knowledgeBase.length() + " characters");
        } catch (Exception e) {
            System.err.println("Error loading knowledge base: " + e.getMessage());
            e.printStackTrace();
            knowledgeBase = "L·ªói khi t·∫£i d·ªØ li·ªáu: " + e.getMessage();
        }
    }

    private String callAI(String question) {
        try {
            JsonObject json = new JsonObject();
            JsonArray contents = new JsonArray();

            JsonObject message = new JsonObject();
            message.addProperty("role", "user");

            JsonArray parts = new JsonArray();
            JsonObject part = new JsonObject();
            part.addProperty("text", systemPrompt + "\n\nD·ªØ li·ªáu:\n" + knowledgeBase + "\n\nC√¢u h·ªèi: " + question);
            parts.add(part);

            message.add("parts", parts);
            contents.add(message);

            json.add("contents", contents);
            JsonObject config = new JsonObject();
            config.addProperty("temperature", 0.7);
            config.addProperty("topK", 40);
            config.addProperty("topP", 0.9);
            config.addProperty("maxOutputTokens", 800);
            config.add("stopSequences", new JsonArray());

            json.add("generationConfig", config);

            // Debug: Log the request payload
            System.out.println("API Request Payload: " + json.toString());

            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = json.toString().getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            int responseCode = connection.getResponseCode();
            // Debug: Log the response code
            System.out.println("API Response Code: " + responseCode);

            if (responseCode == 200) {
                JsonObject response = JsonParser.parseReader(new java.io.InputStreamReader(connection.getInputStream())).getAsJsonObject();
                // Debug: Log the full response
                System.out.println("API Response: " + response.toString());

                return Optional.of(response)
                        .map(r -> r.getAsJsonArray("candidates"))
                        .filter(arr -> arr.size() > 0)
                        .map(arr -> arr.get(0).getAsJsonObject().get("content"))
                        .map(content -> content.getAsJsonObject().getAsJsonArray("parts").get(0).getAsJsonObject().get("text").getAsString())
                        .orElse("Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ API.");
            } else {
                String errorMessage = "L·ªói g·ªçi API: HTTP " + responseCode;
                System.err.println(errorMessage);
                return errorMessage;
            }

        } catch (Exception ex) {
            String errorMessage = "L·ªói khi g·ªçi AI: " + ex.getMessage();
            System.err.println(errorMessage);
            ex.printStackTrace();
            return errorMessage;
        }
    }

    private void showError(String error) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("L·ªói");
        alert.setHeaderText("C√≥ l·ªói x·∫£y ra");
        alert.setContentText(error);
        alert.showAndWait();
    }
}